# Toolchain Defines for RSDK

CC      = rsdk-elf-gcc -march=$(PROCESSOR_NUMBER)
CPP     = $(CC) -E
ASCPP   = $(CC) -E
AS      = $(CC)
LD      = $(CC)
ARCHIVE = rsdk-elf-ar
AR      = rsdk-elf-ar crs
RANLIB  = rsdk-elf-ranlib
OBJCOPY = rsdk-elf-objcopy
OBJHEX  = lxobjHexElf
OBJDUMP	= rsdk-elf-objdump  -m mips:$(OBJDUMP_PROCESSOR_NUMBER)
NM      = rsdk-elf-nm

TOOLDEFINE	= -DRSDK_TOOL
TOOLCFLAGS  = $(TOOLDEFINE) -msoft-float -g
PMONCFLAGS  = $(TOOLCFLAGS) -G 0
DHRYCFLAGS  =

TOOLLDFLAGS	= $(TOOLCFLAGS) -e start -EB -N -Ttext $(TEXT) -n -nostartfiles
DHRYLDFLAGS	= $(TOOLLDFLAGS) -Tbss $(BSS)
PMONLDFLAGS	= $(TOOLCFLAGS) -n -nostartfiles

TOOLLIBS	= -lm -lc

TOOLINCLUDE	=

OBJHEXFLAGS	=
OBJHEXREDIRECT	=

OPT0		= -g -O0
OPT1		= -g -O1
OPT2		= -g -O2
OPT3		= -O3

# O2 Optimizations appear to be broken under some circumstances.
OPT		= $(OPT1)
LIBOPT		= $(OPT1)
DHRYOPT		= $(OPT3)

TOOLASCPPFLAGS = -DRSDK_TOOL -DLANGUAGE_ASSEMBLY -x assembler-with-cpp

TOOLASFLAGS	= -c $(ASCPPFLAGS) $(XTRAASFLAGS) -g$(RSDK_DEBUG_FORMAT)

CRT		= c.o

TOOLCLEAN	=

lx4080_PROCESSOR_NUMBER	=4080
lx4180_PROCESSOR_NUMBER	=4180
lx4189_PROCESSOR_NUMBER	=4189
lx4280_PROCESSOR_NUMBER	=4280
lx4380_PROCESSOR_NUMBER	=4181
lx5180_PROCESSOR_NUMBER	=5180
lx5280_PROCESSOR_NUMBER	=5280
lx8000_PROCESSOR_NUMBER	=8080
rlx4181_PROCESSOR_NUMBER=4181
rlx5181_PROCESSOR_NUMBER=5181
PROCESSOR_NUMBER	= $($(PROCESSOR)_PROCESSOR_NUMBER)

OBJDUMP_lx4080_PROCESSOR_NUMBER	=3000
OBJDUMP_lx4180_PROCESSOR_NUMBER	=4180
OBJDUMP_lx4189_PROCESSOR_NUMBER	=3000
OBJDUMP_lx4280_PROCESSOR_NUMBER	=5280
OBJDUMP_lx4380_PROCESSOR_NUMBER	=4181
OBJDUMP_lx5180_PROCESSOR_NUMBER	=5280
OBJDUMP_lx5280_PROCESSOR_NUMBER	=5280
OBJDUMP_lx8000_PROCESSOR_NUMBER	=3000
OBJDUMP_rlx4181_PROCESSOR_NUMBER=4181
OBJDUMP_rlx5181_PROCESSOR_NUMBER=5181
OBJDUMP_PROCESSOR_NUMBER	= $(OBJDUMP_$(PROCESSOR)_PROCESSOR_NUMBER)

.SUFFIXES :
.SUFFIXES : .s .S .c .o .out .i .bin .nm .img .sr .sre .text .scr .pad .dump

.c.o:
	$(CC) -c $(CFLAGS) -o $@ $<
.s.o:
	$(ASCPP) $(ASCPPFLAGS) -o $*.i $<
	$(AS) $(ASFLAGS) -o $@ $*.i
	$(RM) $*.i
.S.o:
	$(ASCPP) $(ASCPPFLAGS) -o $*.i $<
	$(AS) $(ASFLAGS) -o $@ $*.i
	$(RM) $*.i
.o.out:
	$(LD) $(LDFLAGS) -o $@ $(CRT) $*.o $(LIBS)
.s.i:
	$(ASCPP) $(ASCPPFLAGS) -o $@ $<
.S.i:
	$(ASCPP) $(ASCPPFLAGS) -o $@ $<


.out.img:
	$(OBJCOPY) -O binary $< $@
.out.sr:
	$(OBJHEX) $(OBJHEXFLAGS) $< $(OBJHEXREDIRECT) $@
.out.text:
	$(OBJDUMP) -h -D -l --show-raw-insn $< > $@
.out.nm:
	$(NM) -B -n $< > $@
.img.sre:
	srec -v -o0x$(TEXT) $< $@
.img.pad:
	imgpad $< $@
.img.bin:
	img2bin $< $@
.sre.dump:
	$(OBJDUMP) -EB -s -b srec -D --show-raw-insn $< > $@
.sr.img:
	$(OBJCOPY) -I srec -O binary $< $@
.scr.bin:
	img2bin $< $@
	echo 00000000000000000000000000000000 >> $@
