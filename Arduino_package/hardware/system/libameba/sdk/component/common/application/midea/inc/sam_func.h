/**
 ******************************************************************************
 *This file contains general configurations for Sam usage
 ******************************************************************************
*/

#ifndef __SAM_FUNC_H__
#define __SAM_FUNC_H__

#include "serial_api.h"

// deal with wifi_scan result

/* scan result struct
Pos = 00 Len = 1 record length
Pos = 01 Len = 6 MAC address
Pos = 07 Len = 4 RSSI value
Pos = 11 Len = 1 security mode
Pos = 12 Len = 1 WPS password ID
Pos = 13 Len = n SSID
*/

#define SAM_WIFISCAN_MAX_LENGTH_MAC		6
#define SAM_WIFISCAN_MAX_LENGTH_SSID		33
#define SAM_WIFISCAN_MAX_APCOUNT		100

#define SAM_WIFISCAN_POS_LEN			0
#define SAM_WIFISCAN_POS_MAC			1
#define SAM_WIFISCAN_POS_RSSI			7
#define SAM_WIFISCAN_POS_SECURITYMODE		11
#define SAM_WIFISCAN_POS_WPSPASSWORDID		12
#define SAM_WIFISCAN_POS_CHANNEL		13
#define SAM_WIFISCAN_POS_SSID			14
#define SAM_WIFISCAN_POS_SSID_LEN		14 + SAM_WIFISCAN_MAX_LENGTH_SSID
#define SAM_WIFISCAN_WSR_SIZEOF			SAM_WIFISCAN_POS_SSID_LEN + 1

// Flash layout
#define SAM_FLASH_CALIBRATIONDATA_POS		0xA000
#define SAM_FLASH_CALIBRATIONDATA_LEN		0x200
#define SAM_FLASH_SECTOR_SIZE			0x1000
#define SAM_FLASH_OFFSET_CAL_ID			0x00
#define SAM_FLASH_OFFSET_CAL_RESERVED1		0x02
#define SAM_FLASH_OFFSET_CAL_11B_CH1_2		0x20
#define SAM_FLASH_OFFSET_CAL_11B_CH3_4_5	0x21
#define SAM_FLASH_OFFSET_CAL_11B_CH6_7_8	0x22
#define SAM_FLASH_OFFSET_CAL_11B_CH9_10_11	0x23
#define SAM_FLASH_OFFSET_CAL_11B_CH12_13	0x24
#define SAM_FLASH_OFFSET_CAL_11B_CH14		0x25
#define SAM_FLASH_OFFSET_CAL_11N_CH1_2		0x26
#define SAM_FLASH_OFFSET_CAL_11N_CH3_4_5	0x27
#define SAM_FLASH_OFFSET_CAL_11N_CH6_7_8	0x28
#define SAM_FLASH_OFFSET_CAL_11N_CH9_10_11	0x29
#define SAM_FLASH_OFFSET_CAL_11N_CH12_13_14	0x2A
#define SAM_FLASH_OFFSET_CAL_11G_CH		0x2B
#define SAM_FLASH_OFFSET_CAL_RESERVED2		0x2C

const static u8 ucWiFiRealMap[0x200] = 
{
    0x81, 0x95, 0x16, 0xC2, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,     0x2D, 0x2D, 0x02, 0x2D, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0x20, 0x20, 0x05, 0x1A, 0x00, 0x00, 0xFF, 0x00,
    0x00, 0x3E, 0x02, 0x01, 0x00, 0x23, 0xFC, 0x00,     0x04, 0x20, 0x02, 0x4C, 0x81, 0x95, 0x02, 0x21,
    0x00, 0x0C, 0x04, 0x22, 0x08, 0x00, 0x32, 0x00,     0x21, 0xFF, 0x0C, 0x02, 0x22, 0x00, 0x01, 0x2A,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xEB, 0x00, 0x6E, 0x00, 0x00, 0x01, 0x00, 0x00,     0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x01, 0xFF, 0x10, 0x00, 0xFF, 0x00, 0xFF, 0x00,     0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

typedef struct 
{
    u8 ucTotalLen;
    u8 pcMac[SAM_WIFISCAN_MAX_LENGTH_MAC];
    int iRssi;
    u8 ucSecurityMode;
    u8 ucWpsPasswordId;
    u8 ucChannel;
    u8 pcSsid[SAM_WIFISCAN_MAX_LENGTH_SSID];
    u8 ucSsidLen;
} stcWifiScanResult; 



/*
Formate wifi_scan result
*/
u32 WifiScanResult(scan_buf_arg* psbaIn, stcWifiScanResult* pwsrOut, u32 uiMaxApCount);
/*
Print AP information
*/
void PrnWifiScanResult1(stcWifiScanResult* pwsrIn, u32 uiCount);

/*
Print AP information
*/
void PrnWifiScanResult2(scan_buf_arg* psbaIn, u32 uiMaxApCount);

/*
Delay Millisecond
*/
void LoopDelay(u32 uiMillisecond);

u32 Char2Hex(u8 ucIn);

u32 String2Hex(u8* pucBuffer);

u32 String2Value(char* pcIn);

u32 GetString(char* pcIn, char* pcTag, char* pcOut);

u32 GetValue(char* pcIn, char* pcTag);

/*
Printf Hex
*/
u32 PrnHex(u8* pucBuffer, u32 uiLen);

/*
Watch dog reset after iMS
*/

void WatchDogReset(u32 uiMillisecond);



/*
Read Calibration Data
*/

u32 GetCalibrationData(u8* pucBuffer, u32 uiBufferLen);

u32 PrintFlashMap(u32 uiOffset, u32 uiLen, u8* pucBuffer);

u32 FlashErase(u32 uiOffset, u32 uiSectorCount);

u32 ReloadCalibrationMap();

// uart
void InitSerial(serial_t* stObject, PinName PingNameTx, PinName PingNameRx, u32 uiBandrate, u32 uiDataBits, SerialParity spParity, u32 uiStopBits);

u32 ScanHtml(serial_t* stObject, u32* uiCommand, u32* uiOffset, u32* uiLen, u32 uiBufferLen, u8* pucBuffer);

void FreeSerial(serial_t* stObject);


#endif

